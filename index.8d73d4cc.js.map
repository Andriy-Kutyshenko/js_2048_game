{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,C,C,C,C,C,C,C,C,C,C,C,C,E,G,C,I,E,C,C,E,C,G,E,E,K,A,C,M,E,C,E,G,M,C,E,I,C,E,G,Q,O,C,G,I,C,E,E,C,S,E,C,E,O,W,I,E,I,C,E,U,O,I,Q,S,C,C,C,E,I,E,E,K,C,E,G,S,E,C,E,E,E,E,E,E,E,O,E,C,S,E,C,E,E,E,E,E,E,E,Q,E,C,E,K,E,E,C,C,S,E,C,C,C,E,G,C,C,a,C,E,M,A,U,oC,C,S,E,C,C,C,E,I,I,E,E,E,E,M,C,I,C,I,E,C,C,E,A,C,E,U,C,E,U,E,C,E,E,Y,C,C,E,U,G,C,E,Q,C,C,C,E,O,c,C,E,E,G,C,E,C,C,S,E,C,C,C,C,C,E,O,G,E,E,S,C,G,G,E,E,G,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,G,E,I,A,W,M,A,U,wI,G,C,S,E,C,C,C,E,I,E,E,E,E,E,C,M,E,K,W,G,A,E,C,C,E,C,M,C,C,E,C,O,C,C,E,A,E,K,E,C,I,E,A,E,O,E,C,K,E,G,M,E,G,O,E,E,E,A,Y,O,Q,C,C,C,O,Q,C,C,W,O,I,A,C,E,E,S,E,C,E,O,S,C,E,O,A,S,C,E,G,E,M,A,U,mC,K,G,G,C,G,E,E,G,C,E,A,E,C,C,E,C,E,M,C,C,C,E,C,E,K,E,C,A,C,E,E,M,A,G,E,I,C,G,C,E,E,I,A,G,C,A,C,E,E,I,C,E,C,C,E,C,E,I,C,O,E,O,E,E,A,G,C,E,C,A,E,C,C,E,C,E,K,C,A,E,C,C,E,E,K,E,K,E,E,E,K,M,E,O,E,K,G,C,M,C,C,E,C,K,C,C,C,M,E,E,K,G,E,C,C,E,C,E,C,E,C,Q,M,E,E,E,G,C,G,G,E,I,C,G,G,Q,S,G,C,C,E,A,C,E,E,I,A,E,M,C,G,C,C,E,M,C,E,A,G,C,A,I,C,C,E,E,A,I,C,C,E,A,E,C,E,E,Q,C,G,A,I,C,C,E,E,C,C,G,C,C,E,C,C,C,E,E,C,C,E,C,C,C,E,A,E,C,E,K,C,C,C,E,C,K,C,G,A,I,C,C,E,E,E,K,C,C,C,E,C,C,E,K,C,C,C,E,C,E,E,K,C,G,G,E,K,C,C,C,E,C,C,E,K,C,C,C,E,C,E,G,C,I,C,G,K,C,C,C,E,E,E,G,C,G,G,E,I,C,G,G,Q,C,E,E,I,C,E,E,C,M,E,C,E,C,E,E,C,E,C,Q,C,E,E,C,C,G,A,E,C,C,E,C,M,C,C,E,C,M,C,M,C,C,E,C,C,C,E,C,K,E,K,C,C,C,E,C,E,E,C,C,C,CCEA,IAAI,EAAQ,EAIN,EAAN,WAAM,SAAA,EACQ,CAAW,EADnB,EAAA,IAAA,CAAA,GAEF,IAAI,CAAC,KAAK,CAAG,EAAE,CAEf,IAAK,IAAI,EAAI,EAAG,EANA,GAMiB,IAC/B,IAAI,CAAC,KAAK,CAAC,IAAI,CACb,IAAI,EAAK,EAAa,EATZ,EAS2B,KAAK,KAAK,CAAC,EATtC,IAad,CAAA,IAAI,CAAC,oBAAoB,CAAG,IAAI,CAAC,kBAAkB,GAEnD,IAAI,CAAC,4BAA4B,CAAG,IAAI,CAAC,oBAAoB,CAC1D,GAAG,CAAC,SAAA,CADP,EACiB,OAAE,EAAG,GAAS,OAAO,E,GACtC,IAAI,CAAC,iBAAiB,CAAG,IAAI,CAAC,eAAe,GAE7C,IAAI,CAAC,yBAAyB,CAAG,IAAI,CAAC,iBAAiB,CACpD,GAAG,CAAC,SAAA,CADP,EACc,OAAE,EAAG,GAAM,OAAO,E,E,CAjB9B,OAAA,EAAA,EAAA,C,CAoBJ,IAAA,qBAAA,MAAA,WACE,IAAM,EAAa,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAA,CAArC,EAA6C,OAAA,EAAK,OAAO,E,GACnD,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAEhE,OAAO,CAAU,CAAC,EAAY,AAChC,C,E,CAEA,IAAA,qBAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nfunction _ts_generator(thisArg, body) {\n    var f, y, t, g, _ = {\n        label: 0,\n        sent: function() {\n            if (t[0] & 1) throw t[1];\n            return t[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() {\n        return this;\n    }), g;\n    function verb(n) {\n        return function(v) {\n            return step([\n                n,\n                v\n            ]);\n        };\n    }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while(_)try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [\n                op[0] & 2,\n                t.value\n            ];\n            switch(op[0]){\n                case 0:\n                case 1:\n                    t = op;\n                    break;\n                case 4:\n                    _.label++;\n                    return {\n                        value: op[1],\n                        done: false\n                    };\n                case 5:\n                    _.label++;\n                    y = op[1];\n                    op = [\n                        0\n                    ];\n                    continue;\n                case 7:\n                    op = _.ops.pop();\n                    _.trys.pop();\n                    continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                        _ = 0;\n                        continue;\n                    }\n                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                        _.label = op[1];\n                        break;\n                    }\n                    if (op[0] === 6 && _.label < t[1]) {\n                        _.label = t[1];\n                        t = op;\n                        break;\n                    }\n                    if (t && _.label < t[2]) {\n                        _.label = t[2];\n                        _.ops.push(op);\n                        break;\n                    }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop();\n                    continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) {\n            op = [\n                6,\n                e\n            ];\n            y = 0;\n        } finally{\n            f = t = 0;\n        }\n        if (op[0] & 5) throw op[1];\n        return {\n            value: op[0] ? op[1] : void 0,\n            done: true\n        };\n    }\n}\nvar score = 0;\nvar GRID_SIZE = 4;\nvar CELLS_COUNT = GRID_SIZE * GRID_SIZE;\nvar Grid = /*#__PURE__*/ function() {\n    function Grid(gridElement) {\n        _class_call_check(this, Grid);\n        this.cells = [];\n        for(var i = 0; i < CELLS_COUNT; i++)this.cells.push(new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE)));\n        this.cellsGroupedByColumn = this.groupCellsByColumn();\n        this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(function(column) {\n            return _to_consumable_array(column).reverse();\n        });\n        this.cellsGroupedByRow = this.groupCellsByRow();\n        this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map(function(row) {\n            return _to_consumable_array(row).reverse();\n        });\n    }\n    _create_class(Grid, [\n        {\n            key: \"getRandomEmptyCell\",\n            value: function getRandomEmptyCell() {\n                var emptyCells = this.cells.filter(function(cell) {\n                    return cell.isEmpty();\n                });\n                var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                return emptyCells[randomIndex];\n            }\n        },\n        {\n            key: \"groupCellsByColumn\",\n            value: function groupCellsByColumn() {\n                return this.cells.reduce(function(gropedCells, cell) {\n                    gropedCells[cell.x] = gropedCells[cell.x] || [];\n                    gropedCells[cell.x][cell.y] = cell;\n                    return gropedCells;\n                }, []);\n            }\n        },\n        {\n            key: \"groupCellsByRow\",\n            value: function groupCellsByRow() {\n                return this.cells.reduce(function(gropedCells, cell) {\n                    gropedCells[cell.y] = gropedCells[cell.y] || [];\n                    gropedCells[cell.y][cell.x] = cell;\n                    return gropedCells;\n                }, []);\n            }\n        }\n    ]);\n    return Grid;\n}();\nvar Cell = /*#__PURE__*/ function() {\n    function Cell(gridElement, x, y) {\n        _class_call_check(this, Cell);\n        var cell = document.createElement(\"div\");\n        cell.classList.add(\"field-cell\");\n        gridElement.append(cell);\n        this.x = x;\n        this.y = y;\n    }\n    _create_class(Cell, [\n        {\n            key: \"linkTile\",\n            value: function linkTile(tile) {\n                tile.setXY(this.x, this.y);\n                this.linkedTile = tile;\n            }\n        },\n        {\n            key: \"unlinkTile\",\n            value: function unlinkTile() {\n                this.linkedTile = null;\n            }\n        },\n        {\n            key: \"isEmpty\",\n            value: function isEmpty() {\n                return !this.linkedTile;\n            }\n        },\n        {\n            key: \"linkTileForMerge\",\n            value: function linkTileForMerge(tile) {\n                tile.setXY(this.x, this.y);\n                this.linkedTileForMerge = tile;\n            }\n        },\n        {\n            key: \"unlinkTileForMerge\",\n            value: function unlinkTileForMerge() {\n                this.linkedTileForMerge = null;\n            }\n        },\n        {\n            key: \"hasTileForMerge\",\n            value: function hasTileForMerge() {\n                return !!this.linkedTileForMerge;\n            }\n        },\n        {\n            key: \"canAccept\",\n            value: function canAccept(newTile) {\n                return this.isEmpty() || !this.hasTileForMerge() && this.linkedTile.value === newTile.value;\n            }\n        },\n        {\n            key: \"mergeTiles\",\n            value: function mergeTiles() {\n                this.linkedTile.updateTiles(this.linkedTile.value + this.linkedTileForMerge.value);\n                this.linkedTileForMerge.removeFromDOM();\n                this.unlinkTileForMerge();\n                score += this.linkedTile.value;\n                updateScore();\n            }\n        }\n    ]);\n    return Cell;\n}();\nvar Tile = /*#__PURE__*/ function() {\n    function Tile(gridElement) {\n        _class_call_check(this, Tile);\n        this.tileElement = document.createElement(\"div\");\n        this.tileElement.classList.add(\"tile\");\n        this.updateTiles(Math.random() < 0.9 ? 2 : 4);\n        this.tileElement.textContent = this.value;\n        gridElement.append(this.tileElement);\n    }\n    _create_class(Tile, [\n        {\n            key: \"setXY\",\n            value: function setXY(x, y) {\n                this.x = x;\n                this.y = y;\n                this.tileElement.style.setProperty(\"--x\", x);\n                this.tileElement.style.setProperty(\"--y\", y);\n            }\n        },\n        {\n            key: \"updateTiles\",\n            value: function updateTiles(value) {\n                this.value = value;\n                this.tileElement.textContent = value;\n                this.setTileClass();\n            }\n        },\n        {\n            key: \"setTileClass\",\n            value: function setTileClass() {\n                for(var i = 2; i <= 2048; i *= 2)this.tileElement.classList.remove(\"tile--\".concat(i));\n                this.tileElement.classList.add(\"tile--\".concat(this.value));\n            }\n        },\n        {\n            key: \"removeFromDOM\",\n            value: function removeFromDOM() {\n                this.tileElement.remove();\n            }\n        },\n        {\n            key: \"waitForTransitionEnd\",\n            value: function waitForTransitionEnd() {\n                var _this = this;\n                return new Promise(function(resolve) {\n                    _this.tileElement.addEventListener(\"transitionend\", resolve, {\n                        once: true\n                    });\n                });\n            }\n        },\n        {\n            key: \"waitForAnimationEnd\",\n            value: function waitForAnimationEnd() {\n                var _this = this;\n                return new Promise(function(resolve) {\n                    _this.tileElement.addEventListener(\"animationend\", resolve, {\n                        once: true\n                    });\n                });\n            }\n        }\n    ]);\n    return Tile;\n}();\nvar gameField = document.querySelector(\".game-field\");\nvar startButton = document.getElementById(\"startButton\");\nvar tryAgain = document.querySelector(\".tryAgain\");\nvar gameOver = document.querySelector(\".gameOver\");\nvar youWin = document.querySelector(\".gameOver-title\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageStart = document.querySelector(\".message-start\");\nvar grid = new Grid(gameField);\nfunction updateScore() {\n    var gameScore = document.querySelector(\".game-score\");\n    if (gameScore) gameScore.textContent = score;\n}\nfunction setupInputOnce() {\n    window.addEventListener(\"keydown\", hendleInput, {\n        once: true\n    });\n}\nstartButton.addEventListener(\"click\", function() {\n    if (startButton.classList.contains(\"start\")) {\n        startButton.classList.remove(\"start\");\n        startButton.classList.add(\"restart\");\n        startButton.textContent = \"Restart\";\n        messageStart.classList.add(\"hidden\");\n        grid.getRandomEmptyCell().linkTile(new Tile(gameField));\n        grid.getRandomEmptyCell().linkTile(new Tile(gameField));\n        setupInputOnce();\n    } else if (startButton.classList.contains(\"restart\")) {\n        var restsatGame = confirm(\"Are you sure you want to start a new game? All progress will be lost.\");\n        if (restsatGame) {\n            startButton.classList.add(\"start\");\n            startButton.classList.remove(\"restart\");\n            startButton.innerHTML = \"New Game\";\n            restart();\n        }\n    }\n});\ntryAgain.addEventListener(\"click\", function() {\n    restart();\n});\nfunction hendleInput(e) {\n    return _hendleInput.apply(this, arguments);\n}\nfunction _hendleInput() {\n    _hendleInput = _async_to_generator(function(e) {\n        var _, newTile;\n        return _ts_generator(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    if (hasReached2048()) {\n                        gameOver.classList.remove(\"hidden\");\n                        messageWin.classList.remove(\"hidden\");\n                        youWin.innerHTML = \"You Win!\";\n                        gameOver.style.backgroundColor = \"#edc22e\";\n                        tryAgain.innerHTML = \"New Game\";\n                        return [\n                            2\n                        ];\n                    }\n                    _ = e.key;\n                    switch(_){\n                        case \"ArrowUp\":\n                            return [\n                                3,\n                                1\n                            ];\n                        case \"ArrowDown\":\n                            return [\n                                3,\n                                3\n                            ];\n                        case \"ArrowLeft\":\n                            return [\n                                3,\n                                5\n                            ];\n                        case \"ArrowRight\":\n                            return [\n                                3,\n                                7\n                            ];\n                    }\n                    return [\n                        3,\n                        9\n                    ];\n                case 1:\n                    if (!canMoveUp()) {\n                        setupInputOnce();\n                        return [\n                            2\n                        ];\n                    }\n                    return [\n                        4,\n                        moveUp()\n                    ];\n                case 2:\n                    _state.sent();\n                    return [\n                        3,\n                        10\n                    ];\n                case 3:\n                    if (!canMoveDown()) {\n                        setupInputOnce();\n                        return [\n                            2\n                        ];\n                    }\n                    return [\n                        4,\n                        moveDown()\n                    ];\n                case 4:\n                    _state.sent();\n                    return [\n                        3,\n                        10\n                    ];\n                case 5:\n                    if (!canMoveLeft()) {\n                        setupInputOnce();\n                        return [\n                            2\n                        ];\n                    }\n                    return [\n                        4,\n                        moveLeft()\n                    ];\n                case 6:\n                    _state.sent();\n                    return [\n                        3,\n                        10\n                    ];\n                case 7:\n                    if (!canMoveRight()) {\n                        setupInputOnce();\n                        return [\n                            2\n                        ];\n                    }\n                    return [\n                        4,\n                        moveRight()\n                    ];\n                case 8:\n                    _state.sent();\n                    return [\n                        3,\n                        10\n                    ];\n                case 9:\n                    setupInputOnce();\n                    return [\n                        2\n                    ];\n                case 10:\n                    newTile = new Tile(gameField);\n                    grid.getRandomEmptyCell().linkTile(newTile);\n                    if (!(!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight())) return [\n                        3,\n                        12\n                    ];\n                    return [\n                        4,\n                        newTile.waitForAnimationEnd()\n                    ];\n                case 11:\n                    _state.sent();\n                    gameOver.classList.remove(\"hidden\");\n                    messageLose.classList.remove(\"hidden\");\n                    return [\n                        2\n                    ];\n                case 12:\n                    setupInputOnce();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return _hendleInput.apply(this, arguments);\n}\nfunction moveUp() {\n    return _moveUp.apply(this, arguments);\n}\nfunction _moveUp() {\n    _moveUp = _async_to_generator(function() {\n        return _ts_generator(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        slideTiles(grid.cellsGroupedByColumn)\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return _moveUp.apply(this, arguments);\n}\nfunction moveDown() {\n    return _moveDown.apply(this, arguments);\n}\nfunction _moveDown() {\n    _moveDown = _async_to_generator(function() {\n        return _ts_generator(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        slideTiles(grid.cellsGroupedByReversedColumn)\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return _moveDown.apply(this, arguments);\n}\nfunction moveLeft() {\n    return _moveLeft.apply(this, arguments);\n}\nfunction _moveLeft() {\n    _moveLeft = _async_to_generator(function() {\n        return _ts_generator(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        slideTiles(grid.cellsGroupedByRow)\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return _moveLeft.apply(this, arguments);\n}\nfunction moveRight() {\n    return _moveRight.apply(this, arguments);\n}\nfunction _moveRight() {\n    _moveRight = _async_to_generator(function() {\n        return _ts_generator(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    return [\n                        4,\n                        slideTiles(grid.cellsGroupedByReversedRow)\n                    ];\n                case 1:\n                    _state.sent();\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return _moveRight.apply(this, arguments);\n}\nfunction slideTiles(gropedCells) {\n    return _slideTiles.apply(this, arguments);\n}\nfunction _slideTiles() {\n    _slideTiles = _async_to_generator(function(gropedCells) {\n        var promises;\n        return _ts_generator(this, function(_state) {\n            switch(_state.label){\n                case 0:\n                    promises = [];\n                    gropedCells.forEach(function(group) {\n                        return slideTilesIngroup(group, promises);\n                    });\n                    return [\n                        4,\n                        Promise.all(promises)\n                    ];\n                case 1:\n                    _state.sent();\n                    grid.cells.forEach(function(cell) {\n                        cell.hasTileForMerge() && cell.mergeTiles();\n                    });\n                    return [\n                        2\n                    ];\n            }\n        });\n    });\n    return _slideTiles.apply(this, arguments);\n}\nfunction slideTilesIngroup(group, promises) {\n    for(var i = 1; i < group.length; i++){\n        if (group[i].isEmpty()) continue;\n        var cellWithTile = group[i];\n        var taregetCell = void 0;\n        var j = i - 1;\n        while(j >= 0 && group[j].canAccept(cellWithTile.linkedTile)){\n            taregetCell = group[j];\n            j--;\n        }\n        if (!taregetCell) continue;\n        promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n        if (taregetCell.isEmpty()) taregetCell.linkTile(cellWithTile.linkedTile);\n        else taregetCell.linkTileForMerge(cellWithTile.linkedTile);\n        cellWithTile.unlinkTile();\n    }\n}\nfunction canMoveUp() {\n    return canMove(grid.cellsGroupedByColumn);\n}\nfunction canMoveDown() {\n    return canMove(grid.cellsGroupedByReversedColumn);\n}\nfunction canMoveLeft() {\n    return canMove(grid.cellsGroupedByRow);\n}\nfunction canMoveRight() {\n    return canMove(grid.cellsGroupedByReversedRow);\n}\nfunction canMove(gropedCells) {\n    return gropedCells.some(function(group) {\n        return canMoveinGroup(group);\n    });\n}\nfunction canMoveinGroup(group) {\n    return group.some(function(cell, index) {\n        if (index === 0) return false;\n        if (cell.isEmpty()) return false;\n        var taregetCell = group[index - 1];\n        return taregetCell.canAccept(cell.linkedTile);\n    });\n}\nfunction hasReached2048() {\n    return grid.cells.some(function(cell) {\n        return cell.linkedTile && cell.linkedTile.value === 2048;\n    });\n}\nfunction restart() {\n    location.reload();\n}\n\n//# sourceMappingURL=index.8d73d4cc.js.map\n","'use strict';\n\nlet score = 0;\nconst GRID_SIZE = 4;\nconst CELLS_COUNT = GRID_SIZE * GRID_SIZE;\n\nclass Grid {\n  constructor(gridElement) {\n    this.cells = [];\n\n    for (let i = 0; i < CELLS_COUNT; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE)),\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn\n      .map(column => [ ...column ].reverse());\n    this.cellsGroupedByRow = this.groupCellsByRow();\n\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow\n      .map(row => [ ...row ].reverse());\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((gropedCells, cell) => {\n      gropedCells[cell.x] = gropedCells[cell.x] || [];\n      gropedCells[cell.x][cell.y] = cell;\n\n      return gropedCells;\n    }, []);\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((gropedCells, cell) => {\n      gropedCells[cell.y] = gropedCells[cell.y] || [];\n      gropedCells[cell.y][cell.x] = cell;\n\n      return gropedCells;\n    }, []);\n  }\n}\n\nclass Cell {\n  constructor(gridElement, x, y) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('field-cell');\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return this.isEmpty() || (!this.hasTileForMerge()\n    && this.linkedTile.value === newTile.value);\n  }\n\n  mergeTiles() {\n    this.linkedTile.updateTiles(\n      this.linkedTile.value + this.linkedTileForMerge.value,\n    );\n    this.linkedTileForMerge.removeFromDOM();\n    this.unlinkTileForMerge();\n\n    score += this.linkedTile.value;\n    updateScore();\n  }\n}\n\nclass Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('tile');\n    this.updateTiles(Math.random() < 0.9 ? 2 : 4);\n    this.tileElement.textContent = this.value;\n    gridElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  updateTiles(value) {\n    this.value = value;\n    this.tileElement.textContent = value;\n\n    this.setTileClass();\n  }\n\n  setTileClass() {\n    for (let i = 2; i <= 2048; i *= 2) {\n      this.tileElement.classList.remove(`tile--${i}`);\n    }\n\n    this.tileElement.classList.add(`tile--${this.value}`);\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n\n  waitForTransitionEnd() {\n    return new Promise(resolve => {\n      this.tileElement.addEventListener(\n        'transitionend', resolve, { once: true },\n      );\n    });\n  }\n\n  waitForAnimationEnd() {\n    return new Promise(resolve => {\n      this.tileElement.addEventListener(\n        'animationend', resolve, { once: true },\n      );\n    });\n  }\n}\n\nconst gameField = document.querySelector('.game-field');\nconst startButton = document.getElementById('startButton');\nconst tryAgain = document.querySelector('.tryAgain');\nconst gameOver = document.querySelector('.gameOver');\nconst youWin = document.querySelector('.gameOver-title');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nconst grid = new Grid(gameField);\n\nfunction updateScore() {\n  const gameScore = document.querySelector('.game-score');\n\n  if (gameScore) {\n    gameScore.textContent = score;\n  }\n}\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', hendleInput, { once: true });\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.textContent = 'Restart';\n    messageStart.classList.add('hidden');\n\n    grid.getRandomEmptyCell().linkTile(new Tile(gameField));\n    grid.getRandomEmptyCell().linkTile(new Tile(gameField));\n\n    setupInputOnce();\n  } else if (startButton.classList.contains('restart')) {\n    const restsatGame = confirm(\n      'Are you sure you want to start a new game? All progress will be lost.',\n    );\n\n    if (restsatGame) {\n      startButton.classList.add('start');\n      startButton.classList.remove('restart');\n      startButton.innerHTML = 'New Game';\n      restart();\n    }\n  }\n});\n\ntryAgain.addEventListener('click', () => {\n  restart();\n});\n\nasync function hendleInput(e) {\n  if (hasReached2048()) {\n    gameOver.classList.remove('hidden');\n    messageWin.classList.remove('hidden');\n    youWin.innerHTML = 'You Win!';\n    gameOver.style.backgroundColor = '#edc22e';\n    tryAgain.innerHTML = 'New Game';\n\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      if (!canMoveUp()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveUp();\n      break;\n\n    case 'ArrowDown':\n      if (!canMoveDown()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if (!canMoveLeft()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if (!canMoveRight()) {\n        setupInputOnce();\n\n        return;\n      }\n\n      await moveRight();\n      break;\n\n    default:\n      setupInputOnce();\n\n      return;\n  };\n\n  const newTile = new Tile(gameField);\n\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    await newTile.waitForAnimationEnd();\n    gameOver.classList.remove('hidden');\n    messageLose.classList.remove('hidden');\n\n    return;\n  }\n\n  setupInputOnce();\n}\n\nasync function moveUp() {\n  await slideTiles(grid.cellsGroupedByColumn);\n}\n\nasync function moveDown() {\n  await slideTiles(grid.cellsGroupedByReversedColumn);\n}\n\nasync function moveLeft() {\n  await slideTiles(grid.cellsGroupedByRow);\n}\n\nasync function moveRight() {\n  await slideTiles(grid.cellsGroupedByReversedRow);\n}\n\nasync function slideTiles(gropedCells) {\n  const promises = [];\n\n  gropedCells.forEach(group => slideTilesIngroup(group, promises));\n\n  await Promise.all(promises);\n\n  grid.cells.forEach(cell => {\n    cell.hasTileForMerge() && cell.mergeTiles();\n  });\n}\n\nfunction slideTilesIngroup(group, promises) {\n  for (let i = 1; i < group.length; i++) {\n    if (group[i].isEmpty()) {\n      continue;\n    }\n\n    const cellWithTile = group[i];\n    let taregetCell;\n    let j = i - 1;\n\n    while (j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n      taregetCell = group[j];\n      j--;\n    }\n\n    if (!taregetCell) {\n      continue;\n    }\n\n    promises.push(cellWithTile.linkedTile.waitForTransitionEnd());\n\n    if (taregetCell.isEmpty()) {\n      taregetCell.linkTile(cellWithTile.linkedTile);\n    } else {\n      taregetCell.linkTileForMerge(cellWithTile.linkedTile);\n    }\n\n    cellWithTile.unlinkTile();\n  }\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsGroupedByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsGroupedByReversedColumn);\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsGroupedByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsGroupedByReversedRow);\n}\n\nfunction canMove(gropedCells) {\n  return gropedCells.some(group => canMoveinGroup(group));\n}\n\nfunction canMoveinGroup(group) {\n  return group.some((cell, index) => {\n    if (index === 0) {\n      return false;\n    }\n\n    if (cell.isEmpty()) {\n      return false;\n    }\n\n    const taregetCell = group[index - 1];\n\n    return taregetCell.canAccept(cell.linkedTile);\n  });\n}\n\nfunction hasReached2048() {\n  return grid.cells.some(\n    cell => cell.linkedTile && cell.linkedTile.value === 2048,\n  );\n}\n\nfunction restart() {\n  location.reload();\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_async_to_generator","fn","self","args","arguments","apply","err","undefined","_class_call_check","instance","Constructor","TypeError","_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","_create_class","protoProps","staticProps","prototype","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","toString","call","slice","constructor","name","test","_non_iterable_spread","_ts_generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","v","step","op","pop","push","e","score","Grid","gridElement","cells","GRID_SIZE","Cell","Math","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","row","emptyCells","filter","cell","isEmpty","randomIndex","random","reduce","gropedCells","x","document","createElement","classList","add","append","tile","setXY","linkedTile","linkedTileForMerge","newTile","hasTileForMerge","gameScore","updateTiles","removeFromDOM","unlinkTileForMerge","querySelector","textContent","Tile","tileElement","style","setProperty","setTileClass","remove","concat","_this","addEventListener","once","gameField","startButton","getElementById","tryAgain","gameOver","youWin","messageLose","messageWin","messageStart","grid","setupInputOnce","window","hendleInput","_hendleInput","_state","some","innerHTML","backgroundColor","canMoveUp","moveUp","_moveUp","canMoveDown","moveDown","_moveDown","canMoveLeft","moveLeft","_moveLeft","canMoveRight","moveRight","_moveRight","getRandomEmptyCell","linkTile","waitForAnimationEnd","slideTiles","_slideTiles","promises","forEach","group","slideTilesIngroup","cellWithTile","taregetCell","j","canAccept","waitForTransitionEnd","linkTileForMerge","unlinkTile","all","mergeTiles","canMove","index","restart","location","reload","contains","confirm"],"version":3,"file":"index.8d73d4cc.js.map"}